// tb_accel_tile.sv
// Integration testbench for accel_top using golden vectors generated by
// python/golden_c_tile.py. This TB reads A_0.hex, B_0.hex, C_0.hex from
// tb/integration/test_vectors and uses $readmemh to preload memories, then
// pulses start and checks C_mem against expected values.

module tb_accel_tile;
    // parameters must match accel_top defaults
    localparam M = 8;
    localparam N = 8;
    localparam K = 8;

    reg clk = 0;
    reg rst_n = 0;

    // simple control
    reg start = 0;
    wire done;

    // memory address/data interface from TB to DUT
    reg [31:0] A_addr;
    reg [31:0] B_addr;
    reg [31:0] C_addr;
    reg [31:0] mem_wr_data;
    reg mem_wr_en;

    // UART signals
    reg rx;
    wire tx;
    reg [31:0] uart_data_in;
    wire [31:0] uart_data_out;
    wire uart_valid;
    wire uart_ready;

    // Updated DUT instantiation
    accel_top #(.M(M), .N(N), .K(K)) dut (
        .clk(clk),
        .rst_n(rst_n),
        .start(start),
        .done(done),
        .rx(rx),
        .tx(tx),
        .A_addr(A_addr),
        .B_addr(B_addr),
        .C_addr(C_addr),
        .mem_wr_data(mem_wr_data),
        .mem_wr_en(mem_wr_en)
    );

    // Clock
    always #5 clk = ~clk; // 100MHz-ish (10ns period)

    initial begin
        $display("TB: starting");
        // reset
        rst_n = 0;
        repeat (5) @(posedge clk);
        rst_n = 1;

        // Preload memories using $readmemh into dut's arrays
        $display("Loading A_0.hex, B_0.hex into DUT memories...");
        $readmemh("tb/integration/test_vectors/A_0.hex", dut.A_mem);
        $readmemh("tb/integration/test_vectors/B_0.hex", dut.B_mem);

        // Configure CSR via UART
        $display("Configuring CSR via UART...");
        rx = 1; // idle state
        @(posedge clk);
        uart_data_in = 32'h00000001; // Start command
        rx = 0; // Start bit
        @(posedge clk);
        rx = 1; // Stop bit

        // small delay
        repeat (2) @(posedge clk);

        // Start compute
        @(posedge clk);
        start = 1;
        @(posedge clk);
        start = 0;

        // wait for done
        wait (done == 1);
        $display("DUT reported done. Verifying results...");

        // Load expected C
        reg [31:0] expected [0:M*N-1];
        $readmemh("tb/integration/test_vectors/C_0.hex", expected);

        integer i;
        integer errs = 0;
        for (i = 0; i < M*N; i = i + 1) begin
            if (dut.C_mem[i] !== expected[i]) begin
                $display("Mismatch at idx %0d: dut=0x%08x expected=0x%08x", i, dut.C_mem[i], expected[i]);
                errs = errs + 1;
            end
        end

        if (errs == 0) begin
            $display("PASS: C matches expected for vector 0");
        end else begin
            $display("FAIL: %0d mismatches", errs);
        end

        $finish;
    end
endmodule
